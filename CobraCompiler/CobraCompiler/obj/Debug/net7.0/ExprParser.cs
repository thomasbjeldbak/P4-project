//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\chris\OneDrive\Dokumenter\GitHub\P4-project\CobraCompiler\CobraCompiler\ExprParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CobraCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ExprParser : Parser {
	public const int
		OR=1, AND=2, EQUAL=3, NOT=4, GREAT=5, LESS=6, GREATEQL=7, LESSEQL=8, ASSIGN=9, 
		COMMA=10, SEMI=11, COLON=12, LPAREN=13, RPAREN=14, LCURLY=15, RCURLY=16, 
		TRUE=17, FALSE=18, ADD=19, SUB=20, MUL=21, DIV=22, BOOL=23, TEXT=24, NUM=25, 
		DECIMAL=26, NOTHING=27, LIST=28, QUOTE=29, IF=30, ELSE=31, REPEAT=32, 
		TIMES=33, WHILE=34, FOREACH=35, IN=36, FUNCTION=37, RETURN=38, CALL=39, 
		PRINT=40, SCAN=41, COMMENT=42, LISTADD=43, LISTIDXOF=44, LISTREPLACE=45, 
		LISTVALOF=46, COMM=47, STR=48, DEC=49, INT=50, ID=51, WS=52;
	public const int
		RULE_program = 0, RULE_cmds = 1, RULE_cmd = 2, RULE_dcl = 3, RULE_ass = 4, 
		RULE_stmt = 5, RULE_expr = 6, RULE_oprOr = 7, RULE_logicOr = 8, RULE_oprAnd = 9, 
		RULE_logicAnd = 10, RULE_oprEql = 11, RULE_equal = 12, RULE_oprBool = 13, 
		RULE_bool = 14, RULE_oprExpr = 15, RULE_term = 16, RULE_oprTerm = 17, 
		RULE_factor = 18, RULE_block = 19, RULE_commentStmt = 20, RULE_ctrlStrct = 21, 
		RULE_ifStmt = 22, RULE_elseIfStmt = 23, RULE_else = 24, RULE_loop = 25, 
		RULE_loops = 26, RULE_loopStmt = 27, RULE_whileStmt = 28, RULE_foreachStmt = 29, 
		RULE_listStmt = 30, RULE_listOpr = 31, RULE_listOprExpr = 32, RULE_funcCall = 33, 
		RULE_funcDef = 34, RULE_funcReturn = 35, RULE_funcReturnType = 36, RULE_paramList = 37, 
		RULE_paramTail = 38, RULE_param = 39, RULE_argList = 40, RULE_argTail = 41, 
		RULE_boolean = 42, RULE_type = 43;
	public static readonly string[] ruleNames = {
		"program", "cmds", "cmd", "dcl", "ass", "stmt", "expr", "oprOr", "logicOr", 
		"oprAnd", "logicAnd", "oprEql", "equal", "oprBool", "bool", "oprExpr", 
		"term", "oprTerm", "factor", "block", "commentStmt", "ctrlStrct", "ifStmt", 
		"elseIfStmt", "else", "loop", "loops", "loopStmt", "whileStmt", "foreachStmt", 
		"listStmt", "listOpr", "listOprExpr", "funcCall", "funcDef", "funcReturn", 
		"funcReturnType", "paramList", "paramTail", "param", "argList", "argTail", 
		"boolean", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'or'", "'and'", "'is'", "'is not'", "'>'", "'<'", "'>='", "'<='", 
		"'='", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'true'", "'false'", 
		"'+'", "'-'", "'*'", "'/'", "'boolean'", "'text'", "'number'", "'decimal'", 
		"'nothing'", "'list'", "'\"'", "'if'", "'else'", "'repeat'", "'times'", 
		"'while'", "'for each'", "'in'", "'function'", "'return'", "'call'", "'output'", 
		"'input'", "'comment:'", "'Add'", "'IndexOf'", "'Replace'", "'ValueOf'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
		"TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "DECIMAL", 
		"NOTHING", "LIST", "QUOTE", "IF", "ELSE", "REPEAT", "TIMES", "WHILE", 
		"FOREACH", "IN", "FUNCTION", "RETURN", "CALL", "PRINT", "SCAN", "COMMENT", 
		"LISTADD", "LISTIDXOF", "LISTREPLACE", "LISTVALOF", "COMM", "STR", "DEC", 
		"INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ExprParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public CmdsContext cmds() {
			return GetRuleContext<CmdsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdsContext : ParserRuleContext {
		public CmdContext cmd() {
			return GetRuleContext<CmdContext>(0);
		}
		public CmdsContext cmds() {
			return GetRuleContext<CmdsContext>(0);
		}
		public CmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterCmds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitCmds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdsContext cmds() {
		CmdsContext _localctx = new CmdsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_cmds);
		try {
			State = 94;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case TEXT:
			case NUM:
			case DECIMAL:
			case LIST:
			case IF:
			case REPEAT:
			case FUNCTION:
			case RETURN:
			case CALL:
			case COMM:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; cmd();
				State = 91; cmds();
				}
				break;
			case Eof:
			case RCURLY:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_cmd);
		try {
			State = 98;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IF:
			case REPEAT:
			case FUNCTION:
			case RETURN:
			case CALL:
			case COMM:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; stmt();
				}
				break;
			case BOOL:
			case TEXT:
			case NUM:
			case DECIMAL:
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; dcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public AssContext ass() {
			return GetRuleContext<AssContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExprParser.SEMI, 0); }
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_dcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; type();
			State = 101; Match(ID);
			State = 102; ass();
			State = 103; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(ExprParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterAss(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitAss(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssContext ass() {
		AssContext _localctx = new AssContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_ass);
		try {
			State = 108;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(ASSIGN);
				State = 106; expr();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(ExprParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExprParser.SEMI, 0); }
		public CtrlStrctContext ctrlStrct() {
			return GetRuleContext<CtrlStrctContext>(0);
		}
		public ListStmtContext listStmt() {
			return GetRuleContext<ListStmtContext>(0);
		}
		public FuncDefContext funcDef() {
			return GetRuleContext<FuncDefContext>(0);
		}
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public CommentStmtContext commentStmt() {
			return GetRuleContext<CommentStmtContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(ExprParser.RETURN, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		try {
			State = 130;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(ID);
				State = 111; Match(ASSIGN);
				State = 112; expr();
				State = 113; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; ctrlStrct();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; listStmt();
				State = 117; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119; funcDef();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 120; funcCall();
				State = 121; Match(SEMI);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123; commentStmt();
				State = 124; Match(SEMI);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 126; Match(RETURN);
				State = 127; expr();
				State = 128; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public LogicOrContext logicOr() {
			return GetRuleContext<LogicOrContext>(0);
		}
		public OprOrContext oprOr() {
			return GetRuleContext<OprOrContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; logicOr();
			State = 133; oprOr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprOrContext : ParserRuleContext {
		public ITerminalNode OR() { return GetToken(ExprParser.OR, 0); }
		public LogicOrContext logicOr() {
			return GetRuleContext<LogicOrContext>(0);
		}
		public OprOrContext oprOr() {
			return GetRuleContext<OprOrContext>(0);
		}
		public OprOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oprOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterOprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitOprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOprOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprOrContext oprOr() {
		OprOrContext _localctx = new OprOrContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_oprOr);
		try {
			State = 140;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; Match(OR);
				State = 136; logicOr();
				State = 137; oprOr();
				}
				break;
			case COMMA:
			case SEMI:
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOrContext : ParserRuleContext {
		public LogicAndContext logicAnd() {
			return GetRuleContext<LogicAndContext>(0);
		}
		public OprAndContext oprAnd() {
			return GetRuleContext<OprAndContext>(0);
		}
		public LogicOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterLogicOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitLogicOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicOrContext logicOr() {
		LogicOrContext _localctx = new LogicOrContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_logicOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; logicAnd();
			State = 143; oprAnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprAndContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(ExprParser.AND, 0); }
		public LogicAndContext logicAnd() {
			return GetRuleContext<LogicAndContext>(0);
		}
		public OprAndContext oprAnd() {
			return GetRuleContext<OprAndContext>(0);
		}
		public OprAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oprAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterOprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitOprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprAndContext oprAnd() {
		OprAndContext _localctx = new OprAndContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_oprAnd);
		try {
			State = 150;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(AND);
				State = 146; logicAnd();
				State = 147; oprAnd();
				}
				break;
			case OR:
			case COMMA:
			case SEMI:
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndContext : ParserRuleContext {
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public OprEqlContext oprEql() {
			return GetRuleContext<OprEqlContext>(0);
		}
		public LogicAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndContext logicAnd() {
		LogicAndContext _localctx = new LogicAndContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_logicAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; equal();
			State = 153; oprEql();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprEqlContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(ExprParser.EQUAL, 0); }
		public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public OprEqlContext oprEql() {
			return GetRuleContext<OprEqlContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(ExprParser.NOT, 0); }
		public OprEqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oprEql; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterOprEql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitOprEql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOprEql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprEqlContext oprEql() {
		OprEqlContext _localctx = new OprEqlContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_oprEql);
		try {
			State = 164;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; Match(EQUAL);
				State = 156; equal();
				State = 157; oprEql();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(NOT);
				State = 160; equal();
				State = 161; oprEql();
				}
				break;
			case OR:
			case AND:
			case COMMA:
			case SEMI:
			case RPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public OprBoolContext oprBool() {
			return GetRuleContext<OprBoolContext>(0);
		}
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; @bool();
			State = 167; oprBool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprBoolContext : ParserRuleContext {
		public ITerminalNode GREAT() { return GetToken(ExprParser.GREAT, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public OprBoolContext oprBool() {
			return GetRuleContext<OprBoolContext>(0);
		}
		public ITerminalNode LESS() { return GetToken(ExprParser.LESS, 0); }
		public ITerminalNode GREATEQL() { return GetToken(ExprParser.GREATEQL, 0); }
		public ITerminalNode LESSEQL() { return GetToken(ExprParser.LESSEQL, 0); }
		public OprBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oprBool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterOprBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitOprBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOprBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprBoolContext oprBool() {
		OprBoolContext _localctx = new OprBoolContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_oprBool);
		try {
			State = 186;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GREAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; Match(GREAT);
				State = 170; @bool();
				State = 171; oprBool();
				}
				break;
			case LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; Match(LESS);
				State = 174; @bool();
				State = 175; oprBool();
				}
				break;
			case GREATEQL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(GREATEQL);
				State = 178; @bool();
				State = 179; oprBool();
				}
				break;
			case LESSEQL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181; Match(LESSEQL);
				State = 182; @bool();
				State = 183; oprBool();
				}
				break;
			case OR:
			case AND:
			case EQUAL:
			case NOT:
			case COMMA:
			case SEMI:
			case RPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public OprExprContext oprExpr() {
			return GetRuleContext<OprExprContext>(0);
		}
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; term();
			State = 189; oprExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprExprContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(ExprParser.ADD, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public OprExprContext oprExpr() {
			return GetRuleContext<OprExprContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(ExprParser.SUB, 0); }
		public OprExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oprExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterOprExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitOprExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprExprContext oprExpr() {
		OprExprContext _localctx = new OprExprContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_oprExpr);
		try {
			State = 200;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; Match(ADD);
				State = 192; term();
				State = 193; oprExpr();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(SUB);
				State = 196; term();
				State = 197; oprExpr();
				}
				break;
			case OR:
			case AND:
			case EQUAL:
			case NOT:
			case GREAT:
			case LESS:
			case GREATEQL:
			case LESSEQL:
			case COMMA:
			case SEMI:
			case RPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public OprTermContext oprTerm() {
			return GetRuleContext<OprTermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_term);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; factor();
			State = 203; oprTerm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprTermContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(ExprParser.MUL, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public OprTermContext oprTerm() {
			return GetRuleContext<OprTermContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(ExprParser.DIV, 0); }
		public OprTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oprTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterOprTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitOprTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprTermContext oprTerm() {
		OprTermContext _localctx = new OprTermContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_oprTerm);
		try {
			State = 214;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MUL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(MUL);
				State = 206; factor();
				State = 207; oprTerm();
				}
				break;
			case DIV:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(DIV);
				State = 210; factor();
				State = 211; oprTerm();
				}
				break;
			case OR:
			case AND:
			case EQUAL:
			case NOT:
			case GREAT:
			case LESS:
			case GREATEQL:
			case LESSEQL:
			case COMMA:
			case SEMI:
			case RPAREN:
			case ADD:
			case SUB:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public ListOprExprContext listOprExpr() {
			return GetRuleContext<ListOprExprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(ExprParser.INT, 0); }
		public ITerminalNode DEC() { return GetToken(ExprParser.DEC, 0); }
		public ITerminalNode STR() { return GetToken(ExprParser.STR, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_factor);
		try {
			State = 227;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; Match(LPAREN);
				State = 217; expr();
				State = 218; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; funcCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221; listOprExpr();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 222; Match(INT);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 223; Match(DEC);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 224; Match(STR);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 225; Match(ID);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 226; boolean();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LCURLY() { return GetToken(ExprParser.LCURLY, 0); }
		public CmdsContext cmds() {
			return GetRuleContext<CmdsContext>(0);
		}
		public ITerminalNode RCURLY() { return GetToken(ExprParser.RCURLY, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(LCURLY);
			State = 230; cmds();
			State = 231; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentStmtContext : ParserRuleContext {
		public ITerminalNode COMM() { return GetToken(ExprParser.COMM, 0); }
		public CommentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterCommentStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitCommentStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentStmtContext commentStmt() {
		CommentStmtContext _localctx = new CommentStmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_commentStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(COMM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlStrctContext : ParserRuleContext {
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public CtrlStrctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlStrct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterCtrlStrct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitCtrlStrct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlStrct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlStrctContext ctrlStrct() {
		CtrlStrctContext _localctx = new CtrlStrctContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_ctrlStrct);
		try {
			State = 237;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; ifStmt();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(ExprParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStmtContext elseIfStmt() {
			return GetRuleContext<ElseIfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(IF);
			State = 240; Match(LPAREN);
			State = 241; expr();
			State = 242; Match(RPAREN);
			State = 243; block();
			State = 244; elseIfStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(ExprParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(ExprParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStmtContext elseIfStmt() {
			return GetRuleContext<ElseIfStmtContext>(0);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public ElseIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterElseIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitElseIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStmtContext elseIfStmt() {
		ElseIfStmtContext _localctx = new ElseIfStmtContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_elseIfStmt);
		try {
			State = 256;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(ELSE);
				State = 247; Match(IF);
				State = 248; Match(LPAREN);
				State = 249; expr();
				State = 250; Match(RPAREN);
				State = 251; block();
				State = 252; elseIfStmt();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; @else();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(ExprParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(ELSE);
			State = 259; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(ExprParser.REPEAT, 0); }
		public LoopsContext loops() {
			return GetRuleContext<LoopsContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(REPEAT);
			State = 262; loops();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsContext : ParserRuleContext {
		public LoopStmtContext loopStmt() {
			return GetRuleContext<LoopStmtContext>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public ForeachStmtContext foreachStmt() {
			return GetRuleContext<ForeachStmtContext>(0);
		}
		public LoopsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterLoops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitLoops(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoops(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopsContext loops() {
		LoopsContext _localctx = new LoopsContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_loops);
		try {
			State = 267;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; loopStmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; whileStmt();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266; foreachStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStmtContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode TIMES() { return GetToken(ExprParser.TIMES, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStmtContext loopStmt() {
		LoopStmtContext _localctx = new LoopStmtContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_loopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(LPAREN);
			State = 270; expr();
			State = 271; Match(RPAREN);
			State = 272; Match(TIMES);
			State = 273; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(ExprParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(WHILE);
			State = 276; Match(LPAREN);
			State = 277; expr();
			State = 278; Match(RPAREN);
			State = 279; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStmtContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(ExprParser.FOREACH, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(ExprParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(ExprParser.ID, i);
		}
		public ITerminalNode IN() { return GetToken(ExprParser.IN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStmtContext foreachStmt() {
		ForeachStmtContext _localctx = new ForeachStmtContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_foreachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(FOREACH);
			State = 282; Match(LPAREN);
			State = 283; type();
			State = 284; Match(ID);
			State = 285; Match(IN);
			State = 286; Match(ID);
			State = 287; Match(RPAREN);
			State = 288; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListStmtContext : ParserRuleContext {
		public ListOprContext listOpr() {
			return GetRuleContext<ListOprContext>(0);
		}
		public ListOprExprContext listOprExpr() {
			return GetRuleContext<ListOprExprContext>(0);
		}
		public ListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListStmtContext listStmt() {
		ListStmtContext _localctx = new ListStmtContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_listStmt);
		try {
			State = 292;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290; listOpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 291; listOprExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOprContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(ExprParser.COLON, 0); }
		public ITerminalNode LISTADD() { return GetToken(ExprParser.LISTADD, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode LISTREPLACE() { return GetToken(ExprParser.LISTREPLACE, 0); }
		public ListOprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterListOpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitListOpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOprContext listOpr() {
		ListOprContext _localctx = new ListOprContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_listOpr);
		try {
			State = 308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; Match(ID);
				State = 295; Match(COLON);
				State = 296; Match(LISTADD);
				State = 297; Match(LPAREN);
				State = 298; argList();
				State = 299; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; Match(ID);
				State = 302; Match(COLON);
				State = 303; Match(LISTREPLACE);
				State = 304; Match(LPAREN);
				State = 305; argList();
				State = 306; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOprExprContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(ExprParser.COLON, 0); }
		public ITerminalNode LISTIDXOF() { return GetToken(ExprParser.LISTIDXOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode LISTVALOF() { return GetToken(ExprParser.LISTVALOF, 0); }
		public ListOprExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOprExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterListOprExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitListOprExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOprExprContext listOprExpr() {
		ListOprExprContext _localctx = new ListOprExprContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_listOprExpr);
		try {
			State = 324;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310; Match(ID);
				State = 311; Match(COLON);
				State = 312; Match(LISTIDXOF);
				State = 313; Match(LPAREN);
				State = 314; argList();
				State = 315; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; Match(ID);
				State = 318; Match(COLON);
				State = 319; Match(LISTVALOF);
				State = 320; Match(LPAREN);
				State = 321; argList();
				State = 322; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(ExprParser.CALL, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode PRINT() { return GetToken(ExprParser.PRINT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SCAN() { return GetToken(ExprParser.SCAN, 0); }
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_funcCall);
		try {
			State = 345;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326; Match(CALL);
				State = 327; Match(ID);
				State = 328; Match(LPAREN);
				State = 329; argList();
				State = 330; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332; Match(CALL);
				State = 333; Match(PRINT);
				State = 334; Match(LPAREN);
				State = 335; argList();
				State = 336; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 338; Match(CALL);
				State = 339; type();
				State = 340; Match(SCAN);
				State = 341; Match(LPAREN);
				State = 342; argList();
				State = 343; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDefContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(ExprParser.FUNCTION, 0); }
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public FuncReturnContext funcReturn() {
			return GetRuleContext<FuncReturnContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterFuncDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitFuncDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDefContext funcDef() {
		FuncDefContext _localctx = new FuncDefContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_funcDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(FUNCTION);
			State = 348; Match(ID);
			State = 349; Match(LPAREN);
			State = 350; paramList();
			State = 351; Match(RPAREN);
			State = 352; funcReturn();
			State = 353; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncReturnContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(ExprParser.RETURN, 0); }
		public FuncReturnTypeContext funcReturnType() {
			return GetRuleContext<FuncReturnTypeContext>(0);
		}
		public FuncReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterFuncReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitFuncReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncReturnContext funcReturn() {
		FuncReturnContext _localctx = new FuncReturnContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_funcReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(RETURN);
			State = 356; funcReturnType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NOTHING() { return GetToken(ExprParser.NOTHING, 0); }
		public FuncReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcReturnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterFuncReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitFuncReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncReturnTypeContext funcReturnType() {
		FuncReturnTypeContext _localctx = new FuncReturnTypeContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_funcReturnType);
		try {
			State = 360;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case TEXT:
			case NUM:
			case DECIMAL:
			case LIST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; type();
				}
				break;
			case NOTHING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; Match(NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		public ParamTailContext paramTail() {
			return GetRuleContext<ParamTailContext>(0);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_paramList);
		try {
			State = 366;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
			case TEXT:
			case NUM:
			case DECIMAL:
			case LIST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; param();
				State = 363; paramTail();
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamTailContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(ExprParser.COMMA, 0); }
		public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		public ParamTailContext paramTail() {
			return GetRuleContext<ParamTailContext>(0);
		}
		public ParamTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterParamTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitParamTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamTailContext paramTail() {
		ParamTailContext _localctx = new ParamTailContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_paramTail);
		try {
			State = 373;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368; Match(COMMA);
				State = 369; param();
				State = 370; paramTail();
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(ExprParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; type();
			State = 376; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgTailContext argTail() {
			return GetRuleContext<ArgTailContext>(0);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_argList);
		try {
			State = 382;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
			case TRUE:
			case FALSE:
			case CALL:
			case STR:
			case DEC:
			case INT:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378; expr();
				State = 379; argTail();
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgTailContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(ExprParser.COMMA, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ArgTailContext argTail() {
			return GetRuleContext<ArgTailContext>(0);
		}
		public ArgTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterArgTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitArgTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgTailContext argTail() {
		ArgTailContext _localctx = new ArgTailContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_argTail);
		try {
			State = 389;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; Match(COMMA);
				State = 385; expr();
				State = 386; argTail();
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(ExprParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ExprParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = _input.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(ExprParser.BOOL, 0); }
		public ITerminalNode TEXT() { return GetToken(ExprParser.TEXT, 0); }
		public ITerminalNode NUM() { return GetToken(ExprParser.NUM, 0); }
		public ITerminalNode LIST() { return GetToken(ExprParser.LIST, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExprParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExprParser.RPAREN, 0); }
		public ITerminalNode DECIMAL() { return GetToken(ExprParser.DECIMAL, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExprParserListener typedListener = listener as IExprParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExprParserVisitor<TResult> typedVisitor = visitor as IExprParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_type);
		try {
			State = 402;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393; Match(BOOL);
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; Match(TEXT);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395; Match(NUM);
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 396; Match(LIST);
				State = 397; Match(LPAREN);
				State = 398; type();
				State = 399; Match(RPAREN);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 401; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x36\x197\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x61\n"+
		"\x3\x3\x4\x3\x4\x5\x4\x65\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\x6\x5\x6o\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x85\n\a\x3\b"+
		"\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x8F\n\t\x3\n\x3\n\x3\n\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\x99\n\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\xA7\n\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x5\xF\xBD\n\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xCB\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x5\x13\xD9\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xE6\n\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\xF0\n\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x103\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x10E\n\x1C\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3"+
		" \x5 \x127\n \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!"+
		"\x5!\x137\n!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x5\"\x147\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x15C\n#\x3$\x3$\x3$\x3$\x3$\x3$"+
		"\x3$\x3$\x3%\x3%\x3%\x3&\x3&\x5&\x16B\n&\x3\'\x3\'\x3\'\x3\'\x5\'\x171"+
		"\n\'\x3(\x3(\x3(\x3(\x3(\x5(\x178\n(\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x5*\x181"+
		"\n*\x3+\x3+\x3+\x3+\x3+\x5+\x188\n+\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x5-\x195\n-\x3-\x2\x2\x2.\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$"+
		"\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2\x2\x3\x3"+
		"\x2\x13\x14\x199\x2Z\x3\x2\x2\x2\x4`\x3\x2\x2\x2\x6\x64\x3\x2\x2\x2\b"+
		"\x66\x3\x2\x2\x2\nn\x3\x2\x2\x2\f\x84\x3\x2\x2\x2\xE\x86\x3\x2\x2\x2\x10"+
		"\x8E\x3\x2\x2\x2\x12\x90\x3\x2\x2\x2\x14\x98\x3\x2\x2\x2\x16\x9A\x3\x2"+
		"\x2\x2\x18\xA6\x3\x2\x2\x2\x1A\xA8\x3\x2\x2\x2\x1C\xBC\x3\x2\x2\x2\x1E"+
		"\xBE\x3\x2\x2\x2 \xCA\x3\x2\x2\x2\"\xCC\x3\x2\x2\x2$\xD8\x3\x2\x2\x2&"+
		"\xE5\x3\x2\x2\x2(\xE7\x3\x2\x2\x2*\xEB\x3\x2\x2\x2,\xEF\x3\x2\x2\x2.\xF1"+
		"\x3\x2\x2\x2\x30\x102\x3\x2\x2\x2\x32\x104\x3\x2\x2\x2\x34\x107\x3\x2"+
		"\x2\x2\x36\x10D\x3\x2\x2\x2\x38\x10F\x3\x2\x2\x2:\x115\x3\x2\x2\x2<\x11B"+
		"\x3\x2\x2\x2>\x126\x3\x2\x2\x2@\x136\x3\x2\x2\x2\x42\x146\x3\x2\x2\x2"+
		"\x44\x15B\x3\x2\x2\x2\x46\x15D\x3\x2\x2\x2H\x165\x3\x2\x2\x2J\x16A\x3"+
		"\x2\x2\x2L\x170\x3\x2\x2\x2N\x177\x3\x2\x2\x2P\x179\x3\x2\x2\x2R\x180"+
		"\x3\x2\x2\x2T\x187\x3\x2\x2\x2V\x189\x3\x2\x2\x2X\x194\x3\x2\x2\x2Z[\x5"+
		"\x4\x3\x2[\x3\x3\x2\x2\x2\\]\x5\x6\x4\x2]^\x5\x4\x3\x2^\x61\x3\x2\x2\x2"+
		"_\x61\x3\x2\x2\x2`\\\x3\x2\x2\x2`_\x3\x2\x2\x2\x61\x5\x3\x2\x2\x2\x62"+
		"\x65\x5\f\a\x2\x63\x65\x5\b\x5\x2\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2"+
		"\x2\x65\a\x3\x2\x2\x2\x66g\x5X-\x2gh\a\x35\x2\x2hi\x5\n\x6\x2ij\a\r\x2"+
		"\x2j\t\x3\x2\x2\x2kl\a\v\x2\x2lo\x5\xE\b\x2mo\x3\x2\x2\x2nk\x3\x2\x2\x2"+
		"nm\x3\x2\x2\x2o\v\x3\x2\x2\x2pq\a\x35\x2\x2qr\a\v\x2\x2rs\x5\xE\b\x2s"+
		"t\a\r\x2\x2t\x85\x3\x2\x2\x2u\x85\x5,\x17\x2vw\x5> \x2wx\a\r\x2\x2x\x85"+
		"\x3\x2\x2\x2y\x85\x5\x46$\x2z{\x5\x44#\x2{|\a\r\x2\x2|\x85\x3\x2\x2\x2"+
		"}~\x5*\x16\x2~\x7F\a\r\x2\x2\x7F\x85\x3\x2\x2\x2\x80\x81\a(\x2\x2\x81"+
		"\x82\x5\xE\b\x2\x82\x83\a\r\x2\x2\x83\x85\x3\x2\x2\x2\x84p\x3\x2\x2\x2"+
		"\x84u\x3\x2\x2\x2\x84v\x3\x2\x2\x2\x84y\x3\x2\x2\x2\x84z\x3\x2\x2\x2\x84"+
		"}\x3\x2\x2\x2\x84\x80\x3\x2\x2\x2\x85\r\x3\x2\x2\x2\x86\x87\x5\x12\n\x2"+
		"\x87\x88\x5\x10\t\x2\x88\xF\x3\x2\x2\x2\x89\x8A\a\x3\x2\x2\x8A\x8B\x5"+
		"\x12\n\x2\x8B\x8C\x5\x10\t\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8F\x3\x2\x2\x2"+
		"\x8E\x89\x3\x2\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F\x11\x3\x2\x2\x2\x90\x91\x5"+
		"\x16\f\x2\x91\x92\x5\x14\v\x2\x92\x13\x3\x2\x2\x2\x93\x94\a\x4\x2\x2\x94"+
		"\x95\x5\x16\f\x2\x95\x96\x5\x14\v\x2\x96\x99\x3\x2\x2\x2\x97\x99\x3\x2"+
		"\x2\x2\x98\x93\x3\x2\x2\x2\x98\x97\x3\x2\x2\x2\x99\x15\x3\x2\x2\x2\x9A"+
		"\x9B\x5\x1A\xE\x2\x9B\x9C\x5\x18\r\x2\x9C\x17\x3\x2\x2\x2\x9D\x9E\a\x5"+
		"\x2\x2\x9E\x9F\x5\x1A\xE\x2\x9F\xA0\x5\x18\r\x2\xA0\xA7\x3\x2\x2\x2\xA1"+
		"\xA2\a\x6\x2\x2\xA2\xA3\x5\x1A\xE\x2\xA3\xA4\x5\x18\r\x2\xA4\xA7\x3\x2"+
		"\x2\x2\xA5\xA7\x3\x2\x2\x2\xA6\x9D\x3\x2\x2\x2\xA6\xA1\x3\x2\x2\x2\xA6"+
		"\xA5\x3\x2\x2\x2\xA7\x19\x3\x2\x2\x2\xA8\xA9\x5\x1E\x10\x2\xA9\xAA\x5"+
		"\x1C\xF\x2\xAA\x1B\x3\x2\x2\x2\xAB\xAC\a\a\x2\x2\xAC\xAD\x5\x1E\x10\x2"+
		"\xAD\xAE\x5\x1C\xF\x2\xAE\xBD\x3\x2\x2\x2\xAF\xB0\a\b\x2\x2\xB0\xB1\x5"+
		"\x1E\x10\x2\xB1\xB2\x5\x1C\xF\x2\xB2\xBD\x3\x2\x2\x2\xB3\xB4\a\t\x2\x2"+
		"\xB4\xB5\x5\x1E\x10\x2\xB5\xB6\x5\x1C\xF\x2\xB6\xBD\x3\x2\x2\x2\xB7\xB8"+
		"\a\n\x2\x2\xB8\xB9\x5\x1E\x10\x2\xB9\xBA\x5\x1C\xF\x2\xBA\xBD\x3\x2\x2"+
		"\x2\xBB\xBD\x3\x2\x2\x2\xBC\xAB\x3\x2\x2\x2\xBC\xAF\x3\x2\x2\x2\xBC\xB3"+
		"\x3\x2\x2\x2\xBC\xB7\x3\x2\x2\x2\xBC\xBB\x3\x2\x2\x2\xBD\x1D\x3\x2\x2"+
		"\x2\xBE\xBF\x5\"\x12\x2\xBF\xC0\x5 \x11\x2\xC0\x1F\x3\x2\x2\x2\xC1\xC2"+
		"\a\x15\x2\x2\xC2\xC3\x5\"\x12\x2\xC3\xC4\x5 \x11\x2\xC4\xCB\x3\x2\x2\x2"+
		"\xC5\xC6\a\x16\x2\x2\xC6\xC7\x5\"\x12\x2\xC7\xC8\x5 \x11\x2\xC8\xCB\x3"+
		"\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC1\x3\x2\x2\x2\xCA\xC5\x3\x2\x2\x2"+
		"\xCA\xC9\x3\x2\x2\x2\xCB!\x3\x2\x2\x2\xCC\xCD\x5&\x14\x2\xCD\xCE\x5$\x13"+
		"\x2\xCE#\x3\x2\x2\x2\xCF\xD0\a\x17\x2\x2\xD0\xD1\x5&\x14\x2\xD1\xD2\x5"+
		"$\x13\x2\xD2\xD9\x3\x2\x2\x2\xD3\xD4\a\x18\x2\x2\xD4\xD5\x5&\x14\x2\xD5"+
		"\xD6\x5$\x13\x2\xD6\xD9\x3\x2\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xCF\x3\x2"+
		"\x2\x2\xD8\xD3\x3\x2\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9%\x3\x2\x2\x2\xDA\xDB"+
		"\a\xF\x2\x2\xDB\xDC\x5\xE\b\x2\xDC\xDD\a\x10\x2\x2\xDD\xE6\x3\x2\x2\x2"+
		"\xDE\xE6\x5\x44#\x2\xDF\xE6\x5\x42\"\x2\xE0\xE6\a\x34\x2\x2\xE1\xE6\a"+
		"\x33\x2\x2\xE2\xE6\a\x32\x2\x2\xE3\xE6\a\x35\x2\x2\xE4\xE6\x5V,\x2\xE5"+
		"\xDA\x3\x2\x2\x2\xE5\xDE\x3\x2\x2\x2\xE5\xDF\x3\x2\x2\x2\xE5\xE0\x3\x2"+
		"\x2\x2\xE5\xE1\x3\x2\x2\x2\xE5\xE2\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5"+
		"\xE4\x3\x2\x2\x2\xE6\'\x3\x2\x2\x2\xE7\xE8\a\x11\x2\x2\xE8\xE9\x5\x4\x3"+
		"\x2\xE9\xEA\a\x12\x2\x2\xEA)\x3\x2\x2\x2\xEB\xEC\a\x31\x2\x2\xEC+\x3\x2"+
		"\x2\x2\xED\xF0\x5.\x18\x2\xEE\xF0\x5\x34\x1B\x2\xEF\xED\x3\x2\x2\x2\xEF"+
		"\xEE\x3\x2\x2\x2\xF0-\x3\x2\x2\x2\xF1\xF2\a \x2\x2\xF2\xF3\a\xF\x2\x2"+
		"\xF3\xF4\x5\xE\b\x2\xF4\xF5\a\x10\x2\x2\xF5\xF6\x5(\x15\x2\xF6\xF7\x5"+
		"\x30\x19\x2\xF7/\x3\x2\x2\x2\xF8\xF9\a!\x2\x2\xF9\xFA\a \x2\x2\xFA\xFB"+
		"\a\xF\x2\x2\xFB\xFC\x5\xE\b\x2\xFC\xFD\a\x10\x2\x2\xFD\xFE\x5(\x15\x2"+
		"\xFE\xFF\x5\x30\x19\x2\xFF\x103\x3\x2\x2\x2\x100\x103\x5\x32\x1A\x2\x101"+
		"\x103\x3\x2\x2\x2\x102\xF8\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x102\x101"+
		"\x3\x2\x2\x2\x103\x31\x3\x2\x2\x2\x104\x105\a!\x2\x2\x105\x106\x5(\x15"+
		"\x2\x106\x33\x3\x2\x2\x2\x107\x108\a\"\x2\x2\x108\x109\x5\x36\x1C\x2\x109"+
		"\x35\x3\x2\x2\x2\x10A\x10E\x5\x38\x1D\x2\x10B\x10E\x5:\x1E\x2\x10C\x10E"+
		"\x5<\x1F\x2\x10D\x10A\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10C\x3\x2"+
		"\x2\x2\x10E\x37\x3\x2\x2\x2\x10F\x110\a\xF\x2\x2\x110\x111\x5\xE\b\x2"+
		"\x111\x112\a\x10\x2\x2\x112\x113\a#\x2\x2\x113\x114\x5(\x15\x2\x114\x39"+
		"\x3\x2\x2\x2\x115\x116\a$\x2\x2\x116\x117\a\xF\x2\x2\x117\x118\x5\xE\b"+
		"\x2\x118\x119\a\x10\x2\x2\x119\x11A\x5(\x15\x2\x11A;\x3\x2\x2\x2\x11B"+
		"\x11C\a%\x2\x2\x11C\x11D\a\xF\x2\x2\x11D\x11E\x5X-\x2\x11E\x11F\a\x35"+
		"\x2\x2\x11F\x120\a&\x2\x2\x120\x121\a\x35\x2\x2\x121\x122\a\x10\x2\x2"+
		"\x122\x123\x5(\x15\x2\x123=\x3\x2\x2\x2\x124\x127\x5@!\x2\x125\x127\x5"+
		"\x42\"\x2\x126\x124\x3\x2\x2\x2\x126\x125\x3\x2\x2\x2\x127?\x3\x2\x2\x2"+
		"\x128\x129\a\x35\x2\x2\x129\x12A\a\xE\x2\x2\x12A\x12B\a-\x2\x2\x12B\x12C"+
		"\a\xF\x2\x2\x12C\x12D\x5R*\x2\x12D\x12E\a\x10\x2\x2\x12E\x137\x3\x2\x2"+
		"\x2\x12F\x130\a\x35\x2\x2\x130\x131\a\xE\x2\x2\x131\x132\a/\x2\x2\x132"+
		"\x133\a\xF\x2\x2\x133\x134\x5R*\x2\x134\x135\a\x10\x2\x2\x135\x137\x3"+
		"\x2\x2\x2\x136\x128\x3\x2\x2\x2\x136\x12F\x3\x2\x2\x2\x137\x41\x3\x2\x2"+
		"\x2\x138\x139\a\x35\x2\x2\x139\x13A\a\xE\x2\x2\x13A\x13B\a.\x2\x2\x13B"+
		"\x13C\a\xF\x2\x2\x13C\x13D\x5R*\x2\x13D\x13E\a\x10\x2\x2\x13E\x147\x3"+
		"\x2\x2\x2\x13F\x140\a\x35\x2\x2\x140\x141\a\xE\x2\x2\x141\x142\a\x30\x2"+
		"\x2\x142\x143\a\xF\x2\x2\x143\x144\x5R*\x2\x144\x145\a\x10\x2\x2\x145"+
		"\x147\x3\x2\x2\x2\x146\x138\x3\x2\x2\x2\x146\x13F\x3\x2\x2\x2\x147\x43"+
		"\x3\x2\x2\x2\x148\x149\a)\x2\x2\x149\x14A\a\x35\x2\x2\x14A\x14B\a\xF\x2"+
		"\x2\x14B\x14C\x5R*\x2\x14C\x14D\a\x10\x2\x2\x14D\x15C\x3\x2\x2\x2\x14E"+
		"\x14F\a)\x2\x2\x14F\x150\a*\x2\x2\x150\x151\a\xF\x2\x2\x151\x152\x5R*"+
		"\x2\x152\x153\a\x10\x2\x2\x153\x15C\x3\x2\x2\x2\x154\x155\a)\x2\x2\x155"+
		"\x156\x5X-\x2\x156\x157\a+\x2\x2\x157\x158\a\xF\x2\x2\x158\x159\x5R*\x2"+
		"\x159\x15A\a\x10\x2\x2\x15A\x15C\x3\x2\x2\x2\x15B\x148\x3\x2\x2\x2\x15B"+
		"\x14E\x3\x2\x2\x2\x15B\x154\x3\x2\x2\x2\x15C\x45\x3\x2\x2\x2\x15D\x15E"+
		"\a\'\x2\x2\x15E\x15F\a\x35\x2\x2\x15F\x160\a\xF\x2\x2\x160\x161\x5L\'"+
		"\x2\x161\x162\a\x10\x2\x2\x162\x163\x5H%\x2\x163\x164\x5(\x15\x2\x164"+
		"G\x3\x2\x2\x2\x165\x166\a(\x2\x2\x166\x167\x5J&\x2\x167I\x3\x2\x2\x2\x168"+
		"\x16B\x5X-\x2\x169\x16B\a\x1D\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x169\x3"+
		"\x2\x2\x2\x16BK\x3\x2\x2\x2\x16C\x16D\x5P)\x2\x16D\x16E\x5N(\x2\x16E\x171"+
		"\x3\x2\x2\x2\x16F\x171\x3\x2\x2\x2\x170\x16C\x3\x2\x2\x2\x170\x16F\x3"+
		"\x2\x2\x2\x171M\x3\x2\x2\x2\x172\x173\a\f\x2\x2\x173\x174\x5P)\x2\x174"+
		"\x175\x5N(\x2\x175\x178\x3\x2\x2\x2\x176\x178\x3\x2\x2\x2\x177\x172\x3"+
		"\x2\x2\x2\x177\x176\x3\x2\x2\x2\x178O\x3\x2\x2\x2\x179\x17A\x5X-\x2\x17A"+
		"\x17B\a\x35\x2\x2\x17BQ\x3\x2\x2\x2\x17C\x17D\x5\xE\b\x2\x17D\x17E\x5"+
		"T+\x2\x17E\x181\x3\x2\x2\x2\x17F\x181\x3\x2\x2\x2\x180\x17C\x3\x2\x2\x2"+
		"\x180\x17F\x3\x2\x2\x2\x181S\x3\x2\x2\x2\x182\x183\a\f\x2\x2\x183\x184"+
		"\x5\xE\b\x2\x184\x185\x5T+\x2\x185\x188\x3\x2\x2\x2\x186\x188\x3\x2\x2"+
		"\x2\x187\x182\x3\x2\x2\x2\x187\x186\x3\x2\x2\x2\x188U\x3\x2\x2\x2\x189"+
		"\x18A\t\x2\x2\x2\x18AW\x3\x2\x2\x2\x18B\x195\a\x19\x2\x2\x18C\x195\a\x1A"+
		"\x2\x2\x18D\x195\a\x1B\x2\x2\x18E\x18F\a\x1E\x2\x2\x18F\x190\a\xF\x2\x2"+
		"\x190\x191\x5X-\x2\x191\x192\a\x10\x2\x2\x192\x195\x3\x2\x2\x2\x193\x195"+
		"\a\x1C\x2\x2\x194\x18B\x3\x2\x2\x2\x194\x18C\x3\x2\x2\x2\x194\x18D\x3"+
		"\x2\x2\x2\x194\x18E\x3\x2\x2\x2\x194\x193\x3\x2\x2\x2\x195Y\x3\x2\x2\x2"+
		"\x1A`\x64n\x84\x8E\x98\xA6\xBC\xCA\xD8\xE5\xEF\x102\x10D\x126\x136\x146"+
		"\x15B\x16A\x170\x177\x180\x187\x194";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CobraCompiler
