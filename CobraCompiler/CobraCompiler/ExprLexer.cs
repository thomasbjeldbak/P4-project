//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\chris\OneDrive\Dokumenter\GitHub\P4-project\CobraCompiler\CobraCompiler\ExprLexer.txt by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQUAL=3, NOT=4, GREAT=5, LESS=6, GREATEQL=7, LESSEQL=8, ASSIGN=9, 
		COMMA=10, SEMI=11, COLON=12, LPAREN=13, RPAREN=14, LCURLY=15, RCURLY=16, 
		TRUE=17, FALSE=18, ADD=19, SUB=20, MUL=21, DIV=22, BOOL=23, TEXT=24, NUM=25, 
		DECIMAL=26, NOTHING=27, LIST=28, QUOTE=29, IF=30, ELSE=31, REPEAT=32, 
		TIMES=33, WHILE=34, FOREACH=35, IN=36, FUNCTION=37, RETURN=38, CALL=39, 
		COMMENT=40, PRINT=41, SCAN=42, LISTADD=43, LISTIDXOF=44, LISTDEL=45, LISTVALOF=46, 
		COMM=47, STR=48, DEC=49, INT=50, ID=51, WS=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", "ASSIGN", 
		"COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "TRUE", 
		"FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "DECIMAL", 
		"NOTHING", "LIST", "QUOTE", "IF", "ELSE", "REPEAT", "TIMES", "WHILE", 
		"FOREACH", "IN", "FUNCTION", "RETURN", "CALL", "COMMENT", "PRINT", "SCAN", 
		"LISTADD", "LISTIDXOF", "LISTDEL", "LISTVALOF", "COMM", "STR", "DEC", 
		"INT", "ID", "WS"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input)
	{
		Interpreter = new LexerATNSimulator(_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'or'", "'and'", "'is'", "'is not'", "'>'", "'<'", "'>='", "'<='", 
		"'='", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'true'", "'false'", 
		"'+'", "'-'", "'*'", "'/'", "'boolean'", "'text'", "'number'", "'decimal'", 
		"'nothing'", "'list'", "'\"'", "'if'", "'else'", "'repeat'", "'times'", 
		"'while'", "'for each'", "'in'", "'function'", "'return'", "'call'", "'comment:'", 
		"'output'", "'input'", "'Add'", "'IndexOf'", "'Delete'", "'ValueOf'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
		"TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "DECIMAL", 
		"NOTHING", "LIST", "QUOTE", "IF", "ELSE", "REPEAT", "TIMES", "WHILE", 
		"FOREACH", "IN", "FUNCTION", "RETURN", "CALL", "COMMENT", "PRINT", "SCAN", 
		"LISTADD", "LISTIDXOF", "LISTDEL", "LISTVALOF", "COMM", "STR", "DEC", 
		"INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprLexer.txt"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public int[] SerializedAtn { get { return _serializedATN; } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,365,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,
		1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,
		19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
		23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
		27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,
		33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,
		37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,
		41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
		45,1,45,1,45,1,46,1,46,5,46,322,8,46,10,46,12,46,325,9,46,1,47,1,47,5,
		47,329,8,47,10,47,12,47,332,9,47,1,47,1,47,1,48,4,48,337,8,48,11,48,12,
		48,338,1,48,1,48,4,48,343,8,48,11,48,12,48,344,1,49,4,49,348,8,49,11,49,
		12,49,349,1,50,1,50,5,50,354,8,50,10,50,12,50,357,9,50,1,51,4,51,360,8,
		51,11,51,12,51,361,1,51,1,51,0,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
		41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
		65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
		89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,1,0,5,2,0,34,34,94,94,
		1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,
		12,13,32,32,371,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,108,1,
		0,0,0,5,112,1,0,0,0,7,115,1,0,0,0,9,122,1,0,0,0,11,124,1,0,0,0,13,126,
		1,0,0,0,15,129,1,0,0,0,17,132,1,0,0,0,19,134,1,0,0,0,21,136,1,0,0,0,23,
		138,1,0,0,0,25,140,1,0,0,0,27,142,1,0,0,0,29,144,1,0,0,0,31,146,1,0,0,
		0,33,148,1,0,0,0,35,153,1,0,0,0,37,159,1,0,0,0,39,161,1,0,0,0,41,163,1,
		0,0,0,43,165,1,0,0,0,45,167,1,0,0,0,47,175,1,0,0,0,49,180,1,0,0,0,51,187,
		1,0,0,0,53,195,1,0,0,0,55,203,1,0,0,0,57,208,1,0,0,0,59,210,1,0,0,0,61,
		213,1,0,0,0,63,218,1,0,0,0,65,225,1,0,0,0,67,231,1,0,0,0,69,237,1,0,0,
		0,71,246,1,0,0,0,73,249,1,0,0,0,75,258,1,0,0,0,77,265,1,0,0,0,79,270,1,
		0,0,0,81,279,1,0,0,0,83,286,1,0,0,0,85,292,1,0,0,0,87,296,1,0,0,0,89,304,
		1,0,0,0,91,311,1,0,0,0,93,319,1,0,0,0,95,326,1,0,0,0,97,336,1,0,0,0,99,
		347,1,0,0,0,101,351,1,0,0,0,103,359,1,0,0,0,105,106,5,111,0,0,106,107,
		5,114,0,0,107,2,1,0,0,0,108,109,5,97,0,0,109,110,5,110,0,0,110,111,5,100,
		0,0,111,4,1,0,0,0,112,113,5,105,0,0,113,114,5,115,0,0,114,6,1,0,0,0,115,
		116,5,105,0,0,116,117,5,115,0,0,117,118,5,32,0,0,118,119,5,110,0,0,119,
		120,5,111,0,0,120,121,5,116,0,0,121,8,1,0,0,0,122,123,5,62,0,0,123,10,
		1,0,0,0,124,125,5,60,0,0,125,12,1,0,0,0,126,127,5,62,0,0,127,128,5,61,
		0,0,128,14,1,0,0,0,129,130,5,60,0,0,130,131,5,61,0,0,131,16,1,0,0,0,132,
		133,5,61,0,0,133,18,1,0,0,0,134,135,5,44,0,0,135,20,1,0,0,0,136,137,5,
		59,0,0,137,22,1,0,0,0,138,139,5,58,0,0,139,24,1,0,0,0,140,141,5,40,0,0,
		141,26,1,0,0,0,142,143,5,41,0,0,143,28,1,0,0,0,144,145,5,123,0,0,145,30,
		1,0,0,0,146,147,5,125,0,0,147,32,1,0,0,0,148,149,5,116,0,0,149,150,5,114,
		0,0,150,151,5,117,0,0,151,152,5,101,0,0,152,34,1,0,0,0,153,154,5,102,0,
		0,154,155,5,97,0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,158,5,101,0,
		0,158,36,1,0,0,0,159,160,5,43,0,0,160,38,1,0,0,0,161,162,5,45,0,0,162,
		40,1,0,0,0,163,164,5,42,0,0,164,42,1,0,0,0,165,166,5,47,0,0,166,44,1,0,
		0,0,167,168,5,98,0,0,168,169,5,111,0,0,169,170,5,111,0,0,170,171,5,108,
		0,0,171,172,5,101,0,0,172,173,5,97,0,0,173,174,5,110,0,0,174,46,1,0,0,
		0,175,176,5,116,0,0,176,177,5,101,0,0,177,178,5,120,0,0,178,179,5,116,
		0,0,179,48,1,0,0,0,180,181,5,110,0,0,181,182,5,117,0,0,182,183,5,109,0,
		0,183,184,5,98,0,0,184,185,5,101,0,0,185,186,5,114,0,0,186,50,1,0,0,0,
		187,188,5,100,0,0,188,189,5,101,0,0,189,190,5,99,0,0,190,191,5,105,0,0,
		191,192,5,109,0,0,192,193,5,97,0,0,193,194,5,108,0,0,194,52,1,0,0,0,195,
		196,5,110,0,0,196,197,5,111,0,0,197,198,5,116,0,0,198,199,5,104,0,0,199,
		200,5,105,0,0,200,201,5,110,0,0,201,202,5,103,0,0,202,54,1,0,0,0,203,204,
		5,108,0,0,204,205,5,105,0,0,205,206,5,115,0,0,206,207,5,116,0,0,207,56,
		1,0,0,0,208,209,5,34,0,0,209,58,1,0,0,0,210,211,5,105,0,0,211,212,5,102,
		0,0,212,60,1,0,0,0,213,214,5,101,0,0,214,215,5,108,0,0,215,216,5,115,0,
		0,216,217,5,101,0,0,217,62,1,0,0,0,218,219,5,114,0,0,219,220,5,101,0,0,
		220,221,5,112,0,0,221,222,5,101,0,0,222,223,5,97,0,0,223,224,5,116,0,0,
		224,64,1,0,0,0,225,226,5,116,0,0,226,227,5,105,0,0,227,228,5,109,0,0,228,
		229,5,101,0,0,229,230,5,115,0,0,230,66,1,0,0,0,231,232,5,119,0,0,232,233,
		5,104,0,0,233,234,5,105,0,0,234,235,5,108,0,0,235,236,5,101,0,0,236,68,
		1,0,0,0,237,238,5,102,0,0,238,239,5,111,0,0,239,240,5,114,0,0,240,241,
		5,32,0,0,241,242,5,101,0,0,242,243,5,97,0,0,243,244,5,99,0,0,244,245,5,
		104,0,0,245,70,1,0,0,0,246,247,5,105,0,0,247,248,5,110,0,0,248,72,1,0,
		0,0,249,250,5,102,0,0,250,251,5,117,0,0,251,252,5,110,0,0,252,253,5,99,
		0,0,253,254,5,116,0,0,254,255,5,105,0,0,255,256,5,111,0,0,256,257,5,110,
		0,0,257,74,1,0,0,0,258,259,5,114,0,0,259,260,5,101,0,0,260,261,5,116,0,
		0,261,262,5,117,0,0,262,263,5,114,0,0,263,264,5,110,0,0,264,76,1,0,0,0,
		265,266,5,99,0,0,266,267,5,97,0,0,267,268,5,108,0,0,268,269,5,108,0,0,
		269,78,1,0,0,0,270,271,5,99,0,0,271,272,5,111,0,0,272,273,5,109,0,0,273,
		274,5,109,0,0,274,275,5,101,0,0,275,276,5,110,0,0,276,277,5,116,0,0,277,
		278,5,58,0,0,278,80,1,0,0,0,279,280,5,111,0,0,280,281,5,117,0,0,281,282,
		5,116,0,0,282,283,5,112,0,0,283,284,5,117,0,0,284,285,5,116,0,0,285,82,
		1,0,0,0,286,287,5,105,0,0,287,288,5,110,0,0,288,289,5,112,0,0,289,290,
		5,117,0,0,290,291,5,116,0,0,291,84,1,0,0,0,292,293,5,65,0,0,293,294,5,
		100,0,0,294,295,5,100,0,0,295,86,1,0,0,0,296,297,5,73,0,0,297,298,5,110,
		0,0,298,299,5,100,0,0,299,300,5,101,0,0,300,301,5,120,0,0,301,302,5,79,
		0,0,302,303,5,102,0,0,303,88,1,0,0,0,304,305,5,68,0,0,305,306,5,101,0,
		0,306,307,5,108,0,0,307,308,5,101,0,0,308,309,5,116,0,0,309,310,5,101,
		0,0,310,90,1,0,0,0,311,312,5,86,0,0,312,313,5,97,0,0,313,314,5,108,0,0,
		314,315,5,117,0,0,315,316,5,101,0,0,316,317,5,79,0,0,317,318,5,102,0,0,
		318,92,1,0,0,0,319,323,3,79,39,0,320,322,7,0,0,0,321,320,1,0,0,0,322,325,
		1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,94,1,0,0,0,325,323,1,0,0,0,
		326,330,5,34,0,0,327,329,7,0,0,0,328,327,1,0,0,0,329,332,1,0,0,0,330,328,
		1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,334,5,34,0,
		0,334,96,1,0,0,0,335,337,7,1,0,0,336,335,1,0,0,0,337,338,1,0,0,0,338,336,
		1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,342,5,46,0,0,341,343,7,1,0,
		0,342,341,1,0,0,0,343,344,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,
		98,1,0,0,0,346,348,7,1,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,
		0,0,349,350,1,0,0,0,350,100,1,0,0,0,351,355,7,2,0,0,352,354,7,3,0,0,353,
		352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,102,1,
		0,0,0,357,355,1,0,0,0,358,360,7,4,0,0,359,358,1,0,0,0,360,361,1,0,0,0,
		361,359,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,6,51,0,0,364,104,
		1,0,0,0,8,0,323,330,338,344,349,355,361,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToString().ToArray());


}
