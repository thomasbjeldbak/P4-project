//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\chris\OneDrive\Dokumenter\GitHub\P4-project\CobraCompiler\CobraCompiler\ExprLexer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CobraCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	public const int
		OR=1, AND=2, EQUAL=3, NOT=4, GREAT=5, LESS=6, GREATEQL=7, LESSEQL=8, ASSIGN=9, 
		COMMA=10, SEMI=11, COLON=12, LPAREN=13, RPAREN=14, LCURLY=15, RCURLY=16, 
		TRUE=17, FALSE=18, ADD=19, SUB=20, MUL=21, DIV=22, BOOL=23, TEXT=24, NUM=25, 
		LIST=26, QUOTE=27, IF=28, ELSE=29, REPEAT=30, TIMES=31, WHILE=32, FOREACH=33, 
		IN=34, FUNCTION=35, RETURN=36, CALL=37, LISTADD=38, LISTIDXOF=39, LISTDEL=40, 
		LISTVALOF=41, STR=42, INT=43, ID=44, WS=45;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", "ASSIGN", 
		"COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "TRUE", 
		"FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "LIST", "QUOTE", 
		"IF", "ELSE", "REPEAT", "TIMES", "WHILE", "FOREACH", "IN", "FUNCTION", 
		"RETURN", "CALL", "LISTADD", "LISTIDXOF", "LISTDEL", "LISTVALOF", "STR", 
		"INT", "ID", "WS"
	};


	public ExprLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'or'", "'and'", "'is'", "'is not'", "'>'", "'<'", "'>='", "'<='", 
		"'='", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'true'", "'false'", 
		"'+'", "'-'", "'*'", "'/'", "'boolean'", "'text'", "'number'", "'list'", 
		"'\"'", "'if'", "'else'", "'repeat'", "'times'", "'while'", "'for each'", 
		"'in'", "'function'", "'return'", "'call'", "'Add'", "'IndexOf'", "'Delete'", 
		"'ValueOf'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
		"TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "LIST", 
		"QUOTE", "IF", "ELSE", "REPEAT", "TIMES", "WHILE", "FOREACH", "IN", "FUNCTION", 
		"RETURN", "CALL", "LISTADD", "LISTIDXOF", "LISTDEL", "LISTVALOF", "STR", 
		"INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2/\x129\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3"+
		"\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3"+
		"$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'"+
		"\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3"+
		"*\x3*\x3*\x3*\x3*\x3*\x3+\x3+\a+\x110\n+\f+\xE+\x113\v+\x3+\x3+\x3,\x6"+
		",\x118\n,\r,\xE,\x119\x3-\x3-\a-\x11E\n-\f-\xE-\x121\v-\x3.\x6.\x124\n"+
		".\r.\xE.\x125\x3.\x3.\x2\x2\x2/\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2"+
		"\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2"+
		"\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2"+
		"\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2"+
		"\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'M\x2(O"+
		"\x2)Q\x2*S\x2+U\x2,W\x2-Y\x2.[\x2/\x3\x2\x6\x6\x2\x32;\x43\\\x61\x61\x63"+
		"|\x3\x2\x32;\x5\x2\x43\\\x61\x61\x63|\x5\x2\v\f\xE\xF\"\"\x12C\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3"+
		"\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13"+
		"\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2"+
		"\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2"+
		"\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2"+
		"+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33"+
		"\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2"+
		"\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2"+
		"\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2"+
		"K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2"+
		"\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2"+
		"\x3]\x3\x2\x2\x2\x5`\x3\x2\x2\x2\a\x64\x3\x2\x2\x2\tg\x3\x2\x2\x2\vn\x3"+
		"\x2\x2\x2\rp\x3\x2\x2\x2\xFr\x3\x2\x2\x2\x11u\x3\x2\x2\x2\x13x\x3\x2\x2"+
		"\x2\x15z\x3\x2\x2\x2\x17|\x3\x2\x2\x2\x19~\x3\x2\x2\x2\x1B\x80\x3\x2\x2"+
		"\x2\x1D\x82\x3\x2\x2\x2\x1F\x84\x3\x2\x2\x2!\x86\x3\x2\x2\x2#\x88\x3\x2"+
		"\x2\x2%\x8D\x3\x2\x2\x2\'\x93\x3\x2\x2\x2)\x95\x3\x2\x2\x2+\x97\x3\x2"+
		"\x2\x2-\x99\x3\x2\x2\x2/\x9B\x3\x2\x2\x2\x31\xA3\x3\x2\x2\x2\x33\xA8\x3"+
		"\x2\x2\x2\x35\xAF\x3\x2\x2\x2\x37\xB4\x3\x2\x2\x2\x39\xB6\x3\x2\x2\x2"+
		";\xB9\x3\x2\x2\x2=\xBE\x3\x2\x2\x2?\xC5\x3\x2\x2\x2\x41\xCB\x3\x2\x2\x2"+
		"\x43\xD1\x3\x2\x2\x2\x45\xDA\x3\x2\x2\x2G\xDD\x3\x2\x2\x2I\xE6\x3\x2\x2"+
		"\x2K\xED\x3\x2\x2\x2M\xF2\x3\x2\x2\x2O\xF6\x3\x2\x2\x2Q\xFE\x3\x2\x2\x2"+
		"S\x105\x3\x2\x2\x2U\x10D\x3\x2\x2\x2W\x117\x3\x2\x2\x2Y\x11B\x3\x2\x2"+
		"\x2[\x123\x3\x2\x2\x2]^\aq\x2\x2^_\at\x2\x2_\x4\x3\x2\x2\x2`\x61\a\x63"+
		"\x2\x2\x61\x62\ap\x2\x2\x62\x63\a\x66\x2\x2\x63\x6\x3\x2\x2\x2\x64\x65"+
		"\ak\x2\x2\x65\x66\au\x2\x2\x66\b\x3\x2\x2\x2gh\ak\x2\x2hi\au\x2\x2ij\a"+
		"\"\x2\x2jk\ap\x2\x2kl\aq\x2\x2lm\av\x2\x2m\n\x3\x2\x2\x2no\a@\x2\x2o\f"+
		"\x3\x2\x2\x2pq\a>\x2\x2q\xE\x3\x2\x2\x2rs\a@\x2\x2st\a?\x2\x2t\x10\x3"+
		"\x2\x2\x2uv\a>\x2\x2vw\a?\x2\x2w\x12\x3\x2\x2\x2xy\a?\x2\x2y\x14\x3\x2"+
		"\x2\x2z{\a.\x2\x2{\x16\x3\x2\x2\x2|}\a=\x2\x2}\x18\x3\x2\x2\x2~\x7F\a"+
		"<\x2\x2\x7F\x1A\x3\x2\x2\x2\x80\x81\a*\x2\x2\x81\x1C\x3\x2\x2\x2\x82\x83"+
		"\a+\x2\x2\x83\x1E\x3\x2\x2\x2\x84\x85\a}\x2\x2\x85 \x3\x2\x2\x2\x86\x87"+
		"\a\x7F\x2\x2\x87\"\x3\x2\x2\x2\x88\x89\av\x2\x2\x89\x8A\at\x2\x2\x8A\x8B"+
		"\aw\x2\x2\x8B\x8C\ag\x2\x2\x8C$\x3\x2\x2\x2\x8D\x8E\ah\x2\x2\x8E\x8F\a"+
		"\x63\x2\x2\x8F\x90\an\x2\x2\x90\x91\au\x2\x2\x91\x92\ag\x2\x2\x92&\x3"+
		"\x2\x2\x2\x93\x94\a-\x2\x2\x94(\x3\x2\x2\x2\x95\x96\a/\x2\x2\x96*\x3\x2"+
		"\x2\x2\x97\x98\a,\x2\x2\x98,\x3\x2\x2\x2\x99\x9A\a\x31\x2\x2\x9A.\x3\x2"+
		"\x2\x2\x9B\x9C\a\x64\x2\x2\x9C\x9D\aq\x2\x2\x9D\x9E\aq\x2\x2\x9E\x9F\a"+
		"n\x2\x2\x9F\xA0\ag\x2\x2\xA0\xA1\a\x63\x2\x2\xA1\xA2\ap\x2\x2\xA2\x30"+
		"\x3\x2\x2\x2\xA3\xA4\av\x2\x2\xA4\xA5\ag\x2\x2\xA5\xA6\az\x2\x2\xA6\xA7"+
		"\av\x2\x2\xA7\x32\x3\x2\x2\x2\xA8\xA9\ap\x2\x2\xA9\xAA\aw\x2\x2\xAA\xAB"+
		"\ao\x2\x2\xAB\xAC\a\x64\x2\x2\xAC\xAD\ag\x2\x2\xAD\xAE\at\x2\x2\xAE\x34"+
		"\x3\x2\x2\x2\xAF\xB0\an\x2\x2\xB0\xB1\ak\x2\x2\xB1\xB2\au\x2\x2\xB2\xB3"+
		"\av\x2\x2\xB3\x36\x3\x2\x2\x2\xB4\xB5\a$\x2\x2\xB5\x38\x3\x2\x2\x2\xB6"+
		"\xB7\ak\x2\x2\xB7\xB8\ah\x2\x2\xB8:\x3\x2\x2\x2\xB9\xBA\ag\x2\x2\xBA\xBB"+
		"\an\x2\x2\xBB\xBC\au\x2\x2\xBC\xBD\ag\x2\x2\xBD<\x3\x2\x2\x2\xBE\xBF\a"+
		"t\x2\x2\xBF\xC0\ag\x2\x2\xC0\xC1\ar\x2\x2\xC1\xC2\ag\x2\x2\xC2\xC3\a\x63"+
		"\x2\x2\xC3\xC4\av\x2\x2\xC4>\x3\x2\x2\x2\xC5\xC6\av\x2\x2\xC6\xC7\ak\x2"+
		"\x2\xC7\xC8\ao\x2\x2\xC8\xC9\ag\x2\x2\xC9\xCA\au\x2\x2\xCA@\x3\x2\x2\x2"+
		"\xCB\xCC\ay\x2\x2\xCC\xCD\aj\x2\x2\xCD\xCE\ak\x2\x2\xCE\xCF\an\x2\x2\xCF"+
		"\xD0\ag\x2\x2\xD0\x42\x3\x2\x2\x2\xD1\xD2\ah\x2\x2\xD2\xD3\aq\x2\x2\xD3"+
		"\xD4\at\x2\x2\xD4\xD5\a\"\x2\x2\xD5\xD6\ag\x2\x2\xD6\xD7\a\x63\x2\x2\xD7"+
		"\xD8\a\x65\x2\x2\xD8\xD9\aj\x2\x2\xD9\x44\x3\x2\x2\x2\xDA\xDB\ak\x2\x2"+
		"\xDB\xDC\ap\x2\x2\xDC\x46\x3\x2\x2\x2\xDD\xDE\ah\x2\x2\xDE\xDF\aw\x2\x2"+
		"\xDF\xE0\ap\x2\x2\xE0\xE1\a\x65\x2\x2\xE1\xE2\av\x2\x2\xE2\xE3\ak\x2\x2"+
		"\xE3\xE4\aq\x2\x2\xE4\xE5\ap\x2\x2\xE5H\x3\x2\x2\x2\xE6\xE7\at\x2\x2\xE7"+
		"\xE8\ag\x2\x2\xE8\xE9\av\x2\x2\xE9\xEA\aw\x2\x2\xEA\xEB\at\x2\x2\xEB\xEC"+
		"\ap\x2\x2\xECJ\x3\x2\x2\x2\xED\xEE\a\x65\x2\x2\xEE\xEF\a\x63\x2\x2\xEF"+
		"\xF0\an\x2\x2\xF0\xF1\an\x2\x2\xF1L\x3\x2\x2\x2\xF2\xF3\a\x43\x2\x2\xF3"+
		"\xF4\a\x66\x2\x2\xF4\xF5\a\x66\x2\x2\xF5N\x3\x2\x2\x2\xF6\xF7\aK\x2\x2"+
		"\xF7\xF8\ap\x2\x2\xF8\xF9\a\x66\x2\x2\xF9\xFA\ag\x2\x2\xFA\xFB\az\x2\x2"+
		"\xFB\xFC\aQ\x2\x2\xFC\xFD\ah\x2\x2\xFDP\x3\x2\x2\x2\xFE\xFF\a\x46\x2\x2"+
		"\xFF\x100\ag\x2\x2\x100\x101\an\x2\x2\x101\x102\ag\x2\x2\x102\x103\av"+
		"\x2\x2\x103\x104\ag\x2\x2\x104R\x3\x2\x2\x2\x105\x106\aX\x2\x2\x106\x107"+
		"\a\x63\x2\x2\x107\x108\an\x2\x2\x108\x109\aw\x2\x2\x109\x10A\ag\x2\x2"+
		"\x10A\x10B\aQ\x2\x2\x10B\x10C\ah\x2\x2\x10CT\x3\x2\x2\x2\x10D\x111\a$"+
		"\x2\x2\x10E\x110\t\x2\x2\x2\x10F\x10E\x3\x2\x2\x2\x110\x113\x3\x2\x2\x2"+
		"\x111\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x114\x3\x2\x2\x2\x113"+
		"\x111\x3\x2\x2\x2\x114\x115\a$\x2\x2\x115V\x3\x2\x2\x2\x116\x118\t\x3"+
		"\x2\x2\x117\x116\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x117\x3\x2\x2"+
		"\x2\x119\x11A\x3\x2\x2\x2\x11AX\x3\x2\x2\x2\x11B\x11F\t\x4\x2\x2\x11C"+
		"\x11E\t\x2\x2\x2\x11D\x11C\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D"+
		"\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120Z\x3\x2\x2\x2\x121\x11F\x3\x2\x2"+
		"\x2\x122\x124\t\x5\x2\x2\x123\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125"+
		"\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x128"+
		"\b.\x2\x2\x128\\\x3\x2\x2\x2\a\x2\x111\x119\x11F\x125\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CobraCompiler
