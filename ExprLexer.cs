//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\chris\OneDrive\Desktop\ANTLR\ExprLexer.txt by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQUAL=3, NOT=4, GREAT=5, LESS=6, GREATEQL=7, LESSEQL=8, ASSIGN=9, 
		COMMA=10, SEMI=11, COLON=12, LPAREN=13, RPAREN=14, LCURLY=15, RCURLY=16, 
		TRUE=17, FALSE=18, ADD=19, SUB=20, MUL=21, DIV=22, BOOL=23, TEXT=24, NUM=25, 
		LIST=26, QUOTE=27, IF=28, ELSE=29, REPEAT=30, TIMES=31, WHILE=32, FOREACH=33, 
		IN=34, FUNCTION=35, RETURN=36, CALL=37, LISTADD=38, LISTIDXOF=39, LISTDEL=40, 
		LISTVALOF=41, STR=42, INT=43, ID=44, WS=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", "ASSIGN", 
		"COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "TRUE", 
		"FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "LIST", "QUOTE", 
		"IF", "ELSE", "REPEAT", "TIMES", "WHILE", "FOREACH", "IN", "FUNCTION", 
		"RETURN", "CALL", "LISTADD", "LISTIDXOF", "LISTDEL", "LISTVALOF", "STR", 
		"INT", "ID", "WS"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'or'", "'and'", "'is'", "'is not'", "'>'", "'<'", "'>='", "'<='", 
		"'='", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'true'", "'false'", 
		"'+'", "'-'", "'*'", "'/'", "'boolean'", "'text'", "'number'", "'list'", 
		"'\"'", "'if'", "'else'", "'repeat'", "'times'", "'while'", "'for each'", 
		"'in'", "'function'", "'return'", "'call'", "'Add'", "'IndexOf'", "'Delete'", 
		"'ValueOf'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQUAL", "NOT", "GREAT", "LESS", "GREATEQL", "LESSEQL", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
		"TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "BOOL", "TEXT", "NUM", "LIST", 
		"QUOTE", "IF", "ELSE", "REPEAT", "TIMES", "WHILE", "FOREACH", "IN", "FUNCTION", 
		"RETURN", "CALL", "LISTADD", "LISTIDXOF", "LISTDEL", "LISTVALOF", "STR", 
		"INT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprLexer.txt"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,
		1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,
		19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
		23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
		25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
		31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
		33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,5,41,270,8,41,10,41,12,41,273,
		9,41,1,41,1,41,1,42,4,42,278,8,42,11,42,12,42,279,1,43,1,43,5,43,284,8,
		43,10,43,12,43,287,9,43,1,44,4,44,290,8,44,11,44,12,44,291,1,44,1,44,0,
		0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,1,0,4,4,0,48,57,65,90,95,
		95,97,122,1,0,48,57,3,0,65,90,95,95,97,122,3,0,9,10,12,13,32,32,298,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,1,91,1,0,0,0,3,94,1,0,0,0,5,98,1,0,0,0,7,101,1,0,0,0,9,108,1,0,
		0,0,11,110,1,0,0,0,13,112,1,0,0,0,15,115,1,0,0,0,17,118,1,0,0,0,19,120,
		1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,128,1,0,0,0,29,
		130,1,0,0,0,31,132,1,0,0,0,33,134,1,0,0,0,35,139,1,0,0,0,37,145,1,0,0,
		0,39,147,1,0,0,0,41,149,1,0,0,0,43,151,1,0,0,0,45,153,1,0,0,0,47,161,1,
		0,0,0,49,166,1,0,0,0,51,173,1,0,0,0,53,178,1,0,0,0,55,180,1,0,0,0,57,183,
		1,0,0,0,59,188,1,0,0,0,61,195,1,0,0,0,63,201,1,0,0,0,65,207,1,0,0,0,67,
		216,1,0,0,0,69,219,1,0,0,0,71,228,1,0,0,0,73,235,1,0,0,0,75,240,1,0,0,
		0,77,244,1,0,0,0,79,252,1,0,0,0,81,259,1,0,0,0,83,267,1,0,0,0,85,277,1,
		0,0,0,87,281,1,0,0,0,89,289,1,0,0,0,91,92,5,111,0,0,92,93,5,114,0,0,93,
		2,1,0,0,0,94,95,5,97,0,0,95,96,5,110,0,0,96,97,5,100,0,0,97,4,1,0,0,0,
		98,99,5,105,0,0,99,100,5,115,0,0,100,6,1,0,0,0,101,102,5,105,0,0,102,103,
		5,115,0,0,103,104,5,32,0,0,104,105,5,110,0,0,105,106,5,111,0,0,106,107,
		5,116,0,0,107,8,1,0,0,0,108,109,5,62,0,0,109,10,1,0,0,0,110,111,5,60,0,
		0,111,12,1,0,0,0,112,113,5,62,0,0,113,114,5,61,0,0,114,14,1,0,0,0,115,
		116,5,60,0,0,116,117,5,61,0,0,117,16,1,0,0,0,118,119,5,61,0,0,119,18,1,
		0,0,0,120,121,5,44,0,0,121,20,1,0,0,0,122,123,5,59,0,0,123,22,1,0,0,0,
		124,125,5,58,0,0,125,24,1,0,0,0,126,127,5,40,0,0,127,26,1,0,0,0,128,129,
		5,41,0,0,129,28,1,0,0,0,130,131,5,123,0,0,131,30,1,0,0,0,132,133,5,125,
		0,0,133,32,1,0,0,0,134,135,5,116,0,0,135,136,5,114,0,0,136,137,5,117,0,
		0,137,138,5,101,0,0,138,34,1,0,0,0,139,140,5,102,0,0,140,141,5,97,0,0,
		141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,36,1,0,0,0,145,
		146,5,43,0,0,146,38,1,0,0,0,147,148,5,45,0,0,148,40,1,0,0,0,149,150,5,
		42,0,0,150,42,1,0,0,0,151,152,5,47,0,0,152,44,1,0,0,0,153,154,5,98,0,0,
		154,155,5,111,0,0,155,156,5,111,0,0,156,157,5,108,0,0,157,158,5,101,0,
		0,158,159,5,97,0,0,159,160,5,110,0,0,160,46,1,0,0,0,161,162,5,116,0,0,
		162,163,5,101,0,0,163,164,5,120,0,0,164,165,5,116,0,0,165,48,1,0,0,0,166,
		167,5,110,0,0,167,168,5,117,0,0,168,169,5,109,0,0,169,170,5,98,0,0,170,
		171,5,101,0,0,171,172,5,114,0,0,172,50,1,0,0,0,173,174,5,108,0,0,174,175,
		5,105,0,0,175,176,5,115,0,0,176,177,5,116,0,0,177,52,1,0,0,0,178,179,5,
		34,0,0,179,54,1,0,0,0,180,181,5,105,0,0,181,182,5,102,0,0,182,56,1,0,0,
		0,183,184,5,101,0,0,184,185,5,108,0,0,185,186,5,115,0,0,186,187,5,101,
		0,0,187,58,1,0,0,0,188,189,5,114,0,0,189,190,5,101,0,0,190,191,5,112,0,
		0,191,192,5,101,0,0,192,193,5,97,0,0,193,194,5,116,0,0,194,60,1,0,0,0,
		195,196,5,116,0,0,196,197,5,105,0,0,197,198,5,109,0,0,198,199,5,101,0,
		0,199,200,5,115,0,0,200,62,1,0,0,0,201,202,5,119,0,0,202,203,5,104,0,0,
		203,204,5,105,0,0,204,205,5,108,0,0,205,206,5,101,0,0,206,64,1,0,0,0,207,
		208,5,102,0,0,208,209,5,111,0,0,209,210,5,114,0,0,210,211,5,32,0,0,211,
		212,5,101,0,0,212,213,5,97,0,0,213,214,5,99,0,0,214,215,5,104,0,0,215,
		66,1,0,0,0,216,217,5,105,0,0,217,218,5,110,0,0,218,68,1,0,0,0,219,220,
		5,102,0,0,220,221,5,117,0,0,221,222,5,110,0,0,222,223,5,99,0,0,223,224,
		5,116,0,0,224,225,5,105,0,0,225,226,5,111,0,0,226,227,5,110,0,0,227,70,
		1,0,0,0,228,229,5,114,0,0,229,230,5,101,0,0,230,231,5,116,0,0,231,232,
		5,117,0,0,232,233,5,114,0,0,233,234,5,110,0,0,234,72,1,0,0,0,235,236,5,
		99,0,0,236,237,5,97,0,0,237,238,5,108,0,0,238,239,5,108,0,0,239,74,1,0,
		0,0,240,241,5,65,0,0,241,242,5,100,0,0,242,243,5,100,0,0,243,76,1,0,0,
		0,244,245,5,73,0,0,245,246,5,110,0,0,246,247,5,100,0,0,247,248,5,101,0,
		0,248,249,5,120,0,0,249,250,5,79,0,0,250,251,5,102,0,0,251,78,1,0,0,0,
		252,253,5,68,0,0,253,254,5,101,0,0,254,255,5,108,0,0,255,256,5,101,0,0,
		256,257,5,116,0,0,257,258,5,101,0,0,258,80,1,0,0,0,259,260,5,86,0,0,260,
		261,5,97,0,0,261,262,5,108,0,0,262,263,5,117,0,0,263,264,5,101,0,0,264,
		265,5,79,0,0,265,266,5,102,0,0,266,82,1,0,0,0,267,271,5,34,0,0,268,270,
		7,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,
		0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,5,34,0,0,275,84,1,0,0,0,276,
		278,7,1,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,
		0,0,0,280,86,1,0,0,0,281,285,7,2,0,0,282,284,7,0,0,0,283,282,1,0,0,0,284,
		287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,88,1,0,0,0,287,285,1,0,
		0,0,288,290,7,3,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,
		292,1,0,0,0,292,293,1,0,0,0,293,294,6,44,0,0,294,90,1,0,0,0,5,0,271,279,
		285,291,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
